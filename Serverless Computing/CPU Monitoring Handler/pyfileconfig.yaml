apiVersion: v1
data:
  pyfile: "from datetime import datetime\ndef handler(input:dict,context:object):\n
    \   \n    if(not context.env):\n        context.env = {\n        \"avg-60sec\":[[input[\"cpu_percent-\"+str(i)]]
    for i in range(1,15)],\n        \"avg-60min\":[[input[\"cpu_percent-\"+str(i)]]
    for i in range(1,15)],\n        \"vm-memory\":[input[\"virtual_memory-percent\"]],\n
    \       \"timestamp-60sec\":[input[\"timestamp\"]],\n        \"timestamp-60min\":[input[\"timestamp\"]],\n
    \       \"real-timestamp\":[input[\"timestamp\"]]\n          }\n    else:\n      now
    = datetime.strptime(input[\"timestamp\"],\"%Y-%m-%d %H:%M:%S.%f\")\n      dsec
    = datetime.strptime(context.env[\"timestamp-60sec\"][-1],\"%Y-%m-%d %H:%M:%S.%f\")\n
    \     dmin = datetime.strptime(context.env[\"timestamp-60min\"][-1],\"%Y-%m-%d
    %H:%M:%S.%f\")\n      d3 = now-dsec\n      d4 = now-dmin\n      context.env[\"vm-memory\"].append(input[\"virtual_memory-percent\"])\n
    \     context.env[\"real-timestamp\"].append(input[\"timestamp\"])\n      if(d3.seconds>=60):\n
    \         for i in range(14):\n              average = (sum(context.env[\"avg-60sec\"][i])+input[\"cpu_percent-\"+str(i+1)])/(len(context.env[\"timestamp-60sec\"])+1)\n
    \             context.env[\"avg-60sec\"][i].append(average)\n          context.env[\"timestamp-60sec\"].append(input[\"timestamp\"])\n
    \     if(d4.seconds>=3600):\n          for i in range(14):\n              average
    = (sum(context.env[\"avg-60min\"][i])+input[\"cpu_percent-\"+str(i+1)])/(len(context.env[\"timestamp-60min\"])+1)\n
    \             context.env[\"avg-60min\"][i].append(average)\n          context.env[\"timestamp-60min\"].append(input[\"timestamp\"])\n\n
    \   mymetrics = {\n      \"avg-usage-cpu-60sec\":context.env[\"avg-60sec\"],\n
    \     \"timestamp-60sec\":context.env[\"timestamp-60sec\"],\n      \"avg-usage-cpu-60min\":context.env[\"avg-60min\"],\n
    \     \"virtual-memory-percent-rt\":context.env[\"vm-memory\"],\n      \"timestamp-60min\":context.env[\"timestamp-60min\"],\n
    \     \"timestamp-rt\":context.env[\"real-timestamp\"]\n    }\n    \n    return
    mymetrics"
kind: ConfigMap
metadata:
  name: pyfile
  namespace: julioferreira